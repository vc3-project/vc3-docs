digraph requests {
    compound = true;
    #concentrate = true;
    ratio = compress;
    size="20";
    #rankdir="LR";

    ranksep = 0.15;
    nodesep = 0.15;

    node [fontsize=10]
    edge [fontsize=10];

    infoservice [shape = none ][ label = "" ];

    subgraph cluster_configstates {
        style = invis;
        new;
        initializing;
        pending;
    }

    subgraph cluster_runningstates {
        style = invis;
        running;
    }

    subgraph cluster_endingstates {
        style = invis;
        terminating [ label = "terminating\nset jobs requested = 0"];
        cleanup;
        terminated;
        failure;

        terminating_all [shape = none][ label = ""]
    }

    subgraph cluster_headnode {
        label = "headnode";
        h_boot [ label = "boot"];
        h_initializing [ label = "initializing"];
        h_running [ label = "running"];
        h_failure [ label = "failure"];

        h_terminating_all [shape = none][ label = ""]

        {rank=same h_boot h_initializing h_running}
        {rank=same h_failure h_terminating_all}
    }

    {rank=same cleanup terminating terminated running terminating_all}

    infoservice -> new [ style = dotted ][ label = "pull\lnew\lrequest\l" ];

    new -> initializing   [ label = "request well formed" ];

    initializing -> initializing   [ label = "headnode\lnot running\l\l\l" ];

    initializing -> pending [ label = "headnode\lis running"];

    initializing -> failure [ label = "\lheadnode\lfailure"];

    pending -> pending [ label = "statusinfo not set\lor\lstatusinfo.running < 1"];

    pending    -> running     [ label = "statusinfo.running > 0" ];

    terminating_all -> terminating [ label = "action = 'terminate'\lfrom any state" ];

    terminating -> cleanup     [ label = "statusinfo.{running,idle} == 0" ];

    cleanup     -> terminated  [ label = "garbage collected\lcleanup headnode" ];


    terminating_all -> failure [ label ="any error\lfrom any state.\lrunning set to 0" ];
    failure -> terminating [ label = "action = 'terminate'" ];

    initializing -> h_boot [ style = dotted ][label = "setting up headnode"]
    h_boot -> h_initializing [ label ="openstack boots vm" ];
    h_initializing -> h_running [ label ="playbook finishes running" ];

    h_terminating_all -> h_failure [ label ="any error\lfrom any state." ];
}
